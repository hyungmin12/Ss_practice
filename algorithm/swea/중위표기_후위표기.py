# 중위 표기식 > 후위
# 연산 우선순위가 높은 애가 먼저 출력될 수 있도록 해야 함
# 정상적인 중위표기식 이라는 가정하에


exp="(6+5*(2-8)/2)"
post_exp = ''
st = []

# 우선순위 비교하기 위한 딕셔너리
# 괄호 처리 위해서 우선순위표 2개 만듬
# stack안에 있을때랑 밖에 있을때랑 우선순위가 다름 >> 괄호가
isp = {"*":2 , "/":2, "+": 1, "-": 1, "(" : 0} 
# 스택 안에 있을때 괄호 안의 것이 먼저 처리되어야 함
icp = {"*":2 , "/":2, "+": 1, "-": 1, "(" : 3} 
# 스택에 들어가려할때는 다른 연산자들 보다 괄호가 먼저 처리되어야 함

for c in exp:
    # 하나씩 읽어오기
    # 피연산자 vs 연산자
    # 피연산자라면 출력
    # 연산자라면 우선순위에 따라서 스택에 넣거나 출력
    if c in '+-*/()':
        if c == ")": # 여는 괄호 만날때 까지 모조리 pop
            while st[-1] != "(":
                post_exp += st.pop()
            st.pop() # 여는 괄호 버리기
            continue # 다음 토큰 읽어오기
        if not st:
            st.append(c)
        # st의 top의 연산자보다 우선순위가 높으면 그냥 넣기
        elif isp[st[-1]] < icp[c]: # 지금 들어가는게 스택의 top의 우선순위보다 높으면
            st.append(c)
        else: 
            # 같거나 높으면 일단 스택에 있는 애들 다 뺌
            # 나보다 우선순위가 낮은애가 스택에 들어있으면 들어가면 됨
            # 계속 뺄건데 나보다 낮은애가 top이 될때까지 뺌
            while st and isp[st[-1]] >= icp[c]:
                post_exp += st.pop()
            # 나보다 우선순위 높은애들 다 출력했으니 넣어주기
            st.append(c)
    else: # 피연산자
        post_exp += c

while st: # 남은 연산자 출력
    post_exp += st.pop()

print(post_exp)